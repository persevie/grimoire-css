name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: grimoire_css-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: grimoire_css-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: grimoire_css-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: grimoire_css-windows-x86_64.exe

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine if release is needed
        id: release_check
        run: |
          echo "Last commit message: ${{ github.event.head_commit.message }}"
          BRANCH_NAME=$(git log -1 --pretty=%B | grep 'Merge pull request' | sed 's/.*from .*\/\(.*\)/\1/')
          echo "Merged branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == rc/* ]]; then
            VERSION="${BRANCH_NAME#rc/}"
            TAG="v$VERSION"
            echo "::set-output name=should_release::true"
            echo "::set-output name=tag::$TAG"
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            # Fetch tags
            git fetch --tags
            # Get the latest tag
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            if [ -z "$LATEST_TAG" ]; then
              echo "No existing tags found. Cannot proceed with hotfix tagging."
              exit 1
            fi
            echo "Latest tag: $LATEST_TAG"
            # Extract major, minor, and patch versions
            IFS='.' read -r -a VERSION_PARTS <<< "${LATEST_TAG#v}"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            # Increment the patch version
            PATCH=$((PATCH + 1))
            TAG="v${MAJOR}.${MINOR}.${PATCH}"
            echo "::set-output name=should_release::true"
            echo "::set-output name=tag::$TAG"
          else
            echo "::set-output name=should_release::false"
          fi

      - name: Stop if no release is needed
        if: steps.release_check.outputs.should_release != 'true'
        run: |
          echo "No release needed for this push."
          exit 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.target }}-

      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/grimoire_css${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifacts/${{ matrix.artifact_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}

      - name: Create and push tag
        if: ${{ matrix.os == 'ubuntu-latest' && steps.release_check.outputs.should_release == 'true' }}
        env:
          TAG: ${{ steps.release_check.outputs.tag }}
        run: |
          echo "Creating tag $TAG"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        if: ${{ matrix.os == 'ubuntu-latest' && steps.release_check.outputs.should_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_check.outputs.tag }}
          files: artifacts/**/*
          body: "Release of Grimoire CSS version ${{ steps.release_check.outputs.tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        if: ${{ matrix.os == 'ubuntu-latest' && steps.release_check.outputs.should_release == 'true' }}
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish
